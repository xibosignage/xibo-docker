#!/bin/bash

# Pull in any arguments and set defaults

CMS_VERSION=release_1.8.0-rc2
XMR_VERSION=release_1.8.0-rc2

############
#####
##### Library Functions
#####
############
function genconfig {
  echo "Writing blank configuration file"
  read -d '' config <<-EOF
## Where should we store your user data
DATA_DIR=$(pwd)

## Auto-start containers? YES/NO
AUTO_START=YES

## SMTP Server Configuration
## The CMS needs to be able to send email to you
## Please enter credentials for a suitable SMTP server
## Defaults will work for GMail - replacing your GMail username
## and password as appropriate. You will also need to enable access
## for less secure applications on your GMail account for this to
## work. See https://support.google.com/accounts/answer/6010255

## SMTP Server Hostname
CMS_SMTP_SERVER=smtp.gmail.com:587
## SMTP Username
CMS_SMTP_USERNAME=youraccount@gmail.com
## SMTP Password
CMS_SMTP_PASSWORD=yourpassword
## Use a TLS Connection YES/NO
CMS_SMTP_USE_TLS=YES
## Use a STARTTLS Connection YES/NO
CMS_SMTP_USE_STARTTLS=YES
## Rewrite domain (the domain your email will appear to come from)
CMS_SMTP_REWRITE_DOMAIN=gmail.com
## Hostname that we should identify ourself to the remote server as
CMS_SMTP_HOSTNAME=gmail.com
## Can the From line be overridden in the outbound email
## NB GMail will rewrite the From address anyway so it's not important
## for GMail - YES/NO
CMS_SMTP_FROM_LINE_OVERRIDE=YES

## Which port should XMR listen on for Players?
XMR_PLAYER_PORT=9505

## Which port should the Xibo CMS Webserver listen on?
WEBSERVER_PORT=80

# Name prefix for the containers used in this
# application
INSTANCE_NAME=xibo

## Webserver Hostname
# If you want to set a particular hostname which the webserver
# should respond to, set it here
CMS_SERVER_NAME=localhost

## What root passwords would you like to use for
## your MySQL server root user accounts
## Random defaults have been generated for you
EOF
  echo "$config" > launcher.env

  MYSQL_ROOT_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)
  CMS_DATABASE_PASSWORD=$(head /dev/urandom | tr -dc A-Za-z0-9 | head -c 16)

  echo "MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD" >> launcher.env
  echo "CMS_DATABASE_PASSWORD=$CMS_DATABASE_PASSWORD" >> launcher.env
}


function bootstrap {
  ### Bootstrap
  echo "Bootstrapping CMS Docker Containers"

  docker pull xibosignage/xibo-cms:$CMS_VERSION
  docker pull xibosignage/xibo-xmr:$XMR_VERSION
  docker pull mysql:5.6
  docker run --name $INSTANCE_NAME-cms-db -v $DATA_DIR/shared/db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -d mysql:5.6
  docker run --name $INSTANCE_NAME-cms-xmr -p $XMR_PLAYER_PORT:9505 -d xibosignage/xibo-xmr:$XMR_VERSION
  docker run --name $INSTANCE_NAME-cms-web -p $WEBSERVER_PORT:80 -e XMR_HOST=$INSTANCE_NAME-cms-xmr -e CMS_SMTP_SERVER=$CMS_SMTP_SERVER -e CMS_SMTP_USERNAME=$CMS_SMTP_USERNAME \
             -e CMS_SMTP_PASSWORD=$CMS_SMTP_PASSWORD -e CMS_SMTP_USE_TLS=$CMS_SMTP_USE_TLS -e CMS_SMTP_USE_STARTTLS=$CMS_SMTP_USE_STARTTLS \
             -e CMS_SMTP_REWRITE_DOMAIN=$CMS_SMTP_REWRITE_DOMAIN -e CMS_SMTP_HOSTNAME=$CMS_SMTP_HOSTNAME -e CMS_SMTP_FROM_LINE_OVERRIDE=$CMS_SMTP_FROM_LINE_OVERRIDE \
             -e CMS_DATABASE_PASSWORD=$CMS_DATABASE_PASSWORD -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD\
             -e CMS_SERVER_NAME=$CMS_SERVER_NAME $RESTART_POLICY \
             -d -v $DATA_DIR/shared/cms/custom:/var/www/cms/custom -v $DATA_DIR/shared/backup:/var/www/backup -v $DATA_DIR/shared/cms/web/theme/custom:/var/www/cms/web/theme/custom \
             -v $DATA_DIR/shared/cms/library:/var/www/cms/library -v $DATA_DIR/shared/cms/web/userscripts:/var/www/cms/web/userscripts \
             --link $INSTANCE_NAME-cms-db:mysql --link $INSTANCE_NAME-cms-xmr:50001 xibosignage/xibo-cms:$CMS_VERSION

  echo "CMS is starting. It may take a few moments to be fully running"
}

function bootstrap-dev {
  ### Bootstrap
  echo "Bootstrapping CMS Docker Containers in dev mode"

  docker pull xibosignage/xibo-cms-dev:$CMS_VERSION
  docker pull xibosignage/xibo-xmr:$XMR_VERSION
  docker pull mysql:5.6
  docker run --name $INSTANCE_NAME-cms-db -v $DATA_DIR/shared/db:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -d mysql:5.6
  docker run --name $INSTANCE_NAME-cms-xmr -p $XMR_PLAYER_PORT:9505 -d xibosignage/xibo-xmr:$XMR_VERSION
  docker run --name $INSTANCE_NAME-cms-web -p $WEBSERVER_PORT:80 -e XIBO_DEV_MODE=true -e XMR_HOST=$INSTANCE_NAME-cms-xmr -e MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD -d -v $DATA_DIR/shared/web:/var/www/cms \
             $RESTART_POLICY --link $INSTANCE_NAME-cms-db:mysql --link $INSTANCE_NAME-cms-xmr:50001 xibosignage/xibo-cms-dev:$CMS_VERSION

  echo "CMS is starting. It may take a few moments to be fully running"
}

function start {
  ### Start
  echo "Starting CMS"
  docker start $INSTANCE_NAME-cms-db
  docker start $INSTANCE_NAME-cms-xmr
  docker start $INSTANCE_NAME-cms-web
  echo "CMS is starting. It will take a few moments to be fully started."
  ### End Start
}

function stop {
  ### Stop
  echo "Stopping CMS"
  docker stop $INSTANCE_NAME-cms-web
  docker stop $INSTANCE_NAME-cms-xmr
  docker stop $INSTANCE_NAME-cms-db
  echo "CMS is stopped"
  ### End Stop
}

function destroy {
  ### Destroy
  echo "Destroying CMS Docker Containers (your data is safe!)"
  docker stop $INSTANCE_NAME-cms-web
  docker stop $INSTANCE_NAME-cms-xmr
  docker stop $INSTANCE_NAME-cms-db
  docker rm $INSTANCE_NAME-cms-web
  docker rm $INSTANCE_NAME-cms-xmr
  docker rm $INSTANCE_NAME-cms-db
  echo "CMS containers removed. You will need to bootstrap again in order to run the CMS."
  ### End Destroy
}

function force-destroy {
  ### Force Destroy
  echo "Force-Destroying CMS Docker Containers (your data is probably safe!)"
  docker kill $INSTANCE_NAME-cms-web
  docker kill $INSTANCE_NAME-cms-xmr
  docker kill $INSTANCE_NAME-cms-db
  docker rm $INSTANCE_NAME-cms-web
  docker rm $INSTANCE_NAME-cms-xmr
  docker rm $INSTANCE_NAME-cms-db
  echo "CMS containers removed. You will need to bootstrap again in order to run the CMS."
  ### End Destroy
}

function usage {
  echo "Usage: $0 COMMAND"
  echo ""
  echo "COMMAND:"
  echo "  bootstrap        Build a new environment from scratch"
  echo "  start            Start your existing environment"
  echo "  stop             Stop your existing environment"
  echo "  destroy          Destroy your existing environment."
  echo "                   User data persists."
  echo "  force-destroy    Kill and destroy your existing environment."
  echo "  rebuild          Destroy then bootstrap persisting user data"
  echo "  upgrade          See rebuild"
  echo "  bootstrap-dev    Bootstrap environment but don't install the"
  echo "                   CMS"
  exit
}

if [ ! -e launcher.env ]
then
  genconfig
  echo "**********************"
  echo "Please review the generated configuration in launcher.config, make any adjustments, and then rerun ./launcher bootstrap"
  echo "**********************"
  exit 0
else
  echo "Reading configuration"
  CMS_SERVER_NAME=localhost
  AUTO_START=YES
  source launcher.env

  if [ "$AUTO_START" == "YES" ]
  then
    RESTART_POLICY=--restart=always
  else
    RESTART_POLICY=
  fi
fi

if [ $# -lt 1 ]
then
  usage
fi

# Figure out what we're doing
case "$1" in
  start)
    start
  ;;
  stop)
    stop
  ;;
  bootstrap)
    bootstrap
  ;;
  bootstrap-dev)
    bootstrap-dev
  ;;
  destroy)
    destroy
  ;;
  force-destroy)
    force-destroy
  ;;
  rebuild)
    destroy
    bootstrap
  ;;
  upgrade)
    destroy
    bootstrap
  ;;
  *)
    echo "Invalid command"
    usage
esac
